//     Zepto.js
//     (c) 2010-2015 Thomas Fuchs
//     Zepto.js may be freely distributed under the MIT license.

;(function($, undefined){
  var prefix = '', eventPrefix,
    vendors = { Webkit: 'webkit', Moz: '', O: 'o' },
    testEl = document.createElement('div'),
    supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,
    transform,
    transitionProperty, transitionDuration, transitionTiming, transitionDelay,
    animationName, animationDuration, animationTiming, animationDelay,
    cssReset = {}

  function dasherize(str) { return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase() }
  function normalizeEvent(name) { return eventPrefix ? eventPrefix + name : name.toLowerCase() }

  $.each(vendors, function(vendor, event){
    if (testEl.style[vendor + 'TransitionProperty'] !== undefined) {
      prefix = '-' + vendor.toLowerCase() + '-'
      eventPrefix = event
      return false
    }
  })

  transform = prefix + 'transform'
  cssReset[transitionProperty = prefix + 'transition-property'] =
  cssReset[transitionDuration = prefix + 'transition-duration'] =
  cssReset[transitionDelay    = prefix + 'transition-delay'] =
  cssReset[transitionTiming   = prefix + 'transition-timing-function'] =
  cssReset[animationName      = prefix + 'animation-name'] =
  cssReset[animationDuration  = prefix + 'animation-duration'] =
  cssReset[animationDelay     = prefix + 'animation-delay'] =
  cssReset[animationTiming    = prefix + 'animation-timing-function'] = ''

  $.fx = {
    off: (eventPrefix === undefined && testEl.style.transitionProperty === undefined),
    speeds: { _default: 400, fast: 200, slow: 600 },
    cssPrefix: prefix,
    transitionEnd: normalizeEvent('TransitionEnd'),
    animationEnd: normalizeEvent('AnimationEnd')
  }

  $.fn.animate = function(properties, duration, ease, callback, delay){
    if ($.isFunction(duration))
      callback = duration, ease = undefined, duration = undefined
    if ($.isFunction(ease))
      callback = ease, ease = undefined
    if ($.isPlainObject(duration))
      ease = duration.easing, callback = duration.complete, delay = duration.delay, duration = duration.duration
    if (duration) duration = (typeof duration == 'number' ? duration :
                    ($.fx.speeds[duration] || $.fx.speeds._default)) / 1000
    if (delay) delay = parseFloat(delay) / 1000
    return this.anim(properties, duration, ease, callback, delay)
  }

  $.fn.anim = function(properties, duration, ease, callback, delay){
    var key, cssValues = {}, cssProperties, transforms = '',
        that = this, wrappedCallback, endEvent = $.fx.transitionEnd,
        fired = false

    if (duration === undefined) duration = $.fx.speeds._default / 1000
    if (delay === undefined) delay = 0
    if ($.fx.off) duration = 0

    if (typeof properties == 'string') {
      // keyframe animation
      cssValues[animationName] = properties
      cssValues[animationDuration] = duration + 's'
      cssValues[animationDelay] = delay + 's'
      cssValues[animationTiming] = (ease || 'linear')
      endEvent = $.fx.animationEnd
    } else {
      cssProperties = []
      // CSS transitions
      for (key in properties)
        if (supportedTransforms.test(key)) transforms += key + '(' + properties[key] + ') '
        else cssValues[key] = properties[key], cssProperties.push(dasherize(key))

      if (transforms) cssValues[transform] = transforms, cssProperties.push(transform)
      if (duration > 0 && typeof properties === 'object') {
        cssValues[transitionProperty] = cssProperties.join(', ')
        cssValues[transitionDuration] = duration + 's'
        cssValues[transitionDelay] = delay + 's'
        cssValues[transitionTiming] = (ease || 'linear')
      }
    }

    wrappedCallback = function(event){
      if (typeof event !== 'undefined') {
        if (event.target !== event.currentTarget) return // makes sure the event didn't bubble from "below"
        $(event.target).unbind(endEvent, wrappedCallback)
      } else
        $(this).unbind(endEvent, wrappedCallback) // triggered by setTimeout

      fired = true
      $(this).css(cssReset)
      callback && callback.call(this)
    }
    if (duration > 0){
      this.bind(endEvent, wrappedCallback)
      // transitionEnd is not always firing on older Android phones
      // so make sure it gets fired
      setTimeout(function(){
        if (fired) return
        wrappedCallback.call(that)
      }, ((duration + delay) * 1000) + 25)
    }

    // trigger page reflow so new elements can animate
    this.size() && this.get(0).clientLeft

    this.css(cssValues)

    if (duration <= 0) setTimeout(function() {
      that.each(function(){ wrappedCallback.call(this) })
    }, 0)

    return this
  }

  testEl = null
})(Zepto)

// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

// requestAnimationFrame polyfill by Erik Möller
// fixes from Paul Irish and Tino Zijdel

!(function() {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
                                   || window[vendors[x]+'CancelRequestAnimationFrame'];
    }
 
    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
              timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
 
    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
}());

/**
 * 随机数
 */
function Random(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min)
}

/**
 * 弹窗
 */
var Modal = (function() {

  var exports = {};

  var modal = (function() {
    var el = $('#modal')
  
    el.on('click', '.close', function(e) {
      e.preventDefault()
      el.hide()
    })
  
    return {
      update: function(opts) {
        var cls = 'modal'
        if (opts.cls) {
          cls = cls + ' ' + opts.cls
        }
        el.removeClass().addClass(cls)
      
        el.find('.title').text(opts.title)

        if (opts.intro) {
          el.find('.intro').text(opts.intro)
        }

        if (opts.imgurl) {
          el.find('.ico-box').html('<img width="320" src="' + opts.imgurl + '" />')
        }
        if (opts.ico) {
          el.find('.ico-box').html('<i class="ico ' + opts.ico + '"></i>')
        }

        if (opts.subIntro) {
          el.find('section .sub-intro').remove()
          el.find('section').append(opts.subIntro)
        } else {
          el.find('section .sub-intro').remove()
        }

        if (opts.primaryBtn || opts.defaultBtn) {
          var doubleBtn = $('<div></div>')

          opts.defaultBtn && doubleBtn.append(opts.defaultBtn())
          opts.primaryBtn && doubleBtn.append(opts.primaryBtn())
        
          if (opts.defaultBtn && opts.primaryBtn) {
            doubleBtn.addClass('double-btn')
          }
        
          el.find('.btn-group').html(doubleBtn)
        } else {
          el.find('.btn-group').html('<a class="btn-primary btn close">知道了</a>')
        }
        return this
      },

      hide: function() {
        el.hide()
      },
    
      show: function() {
        el.show()
      }
    }
  })()


  /**
   * 没有中奖
   */
  exports.noWinning = function() {
    modal.update({
      title: '没中奖',
      intro: '别灰心，再来一次吧~',
      ico  : 'not-win-' + Random(1, 2)
    }).show()
  }

  exports.default = function(title) {
    modal.update({
      title: title,
      intro: ' ',
      ico  : 'help'
    }).show()
  }
  /**
   * 没有登录
   */
  exports.noLogin = function() {
    modal.update({
      title: '您还没有登录哦',
      intro: '赶快去登录吧',
      ico  : 'no-login'
    }).show()
  }
  /**
   * 网络异常
   */
  exports.networkError = function() {
    modal.update({
      title: '网络异常',
      intro: '没事的，再试一遍就好了~',
      ico  : 'help'
    }).show()
  }

  /**
   * 系统错误
   */
  exports.systemError = exports.networkError

  /**
   * 活动已结束
   */
  exports.activityClosed = function() {
    modal.update({
      title: '活动已结束',
      intro: '下次早点来吧',
      ico  : 'over'
    }).show()
  }

  // 今日次数已用完
  exports.todayExceedFreeCount = function() {
    modal.update({
      title: '今日次数已用完',
      intro: '明天再来哦~',
      ico  : 'over'
    }).show()
  }

  // 永久次数已用完
  exports.exceedFreeCount = function() {
    modal.update({
      title: '永久次数已用完',
      intro: '下次赶早~',
      ico  : 'over'
    }).show()
  }

  /**
   * 积分不足
   */
  exports.lackIntegral = function() {
    modal.update({
      title: '积分不足',
      intro: '赚足积分后再来吧~',
      ico  : 'empty'
    }).show()
  }

  exports.winning = function(data) {
    if (CFG && CFG.activityType === 'credits') {
      var type = '首页“兑换记录”'
    } else {
      var type = '“中奖记录”'
    }
    modal.update({
      cls   : 'ball',
      title : '恭喜您',
      intro : '获得了' + data.title,
      subIntro: '<div class="sub-intro">' +
        '<p>也可至' + type + '里领取，</p>' +
        '<p>24小时内有效</p></div>',
      imgurl: data.imgurl,
      primaryBtn: function() {
        return '<a class="btn-primary btn" href="' + data.link + '">马上领奖</a>'
      },
      defaultBtn: function() {
        return '<a class="btn-default btn close">继续抽奖</a>'
      }
    }).show()
  }

  /**
   * 获得了免费再抽一次
   */
  exports.again = function(data) {
    modal.update({
      cls   : 'ball',
      title : '恭喜您',
      intro : '获得了免费再抽一次',
      ico   : 'machine',
      primaryBtn: function() {
        var link = $('<a class="btn-primary btn">再抽一次</a>')
        link.on('click', function() {
          $('.start').trigger('click')
          modal.hide()
        })
      
        return link
      }
    }).show()
  }

  return exports
})()


/**
 * 老虎机
 */
function Reel(opts) {
  this.opts = opts || {}
    var reel = document.createElement('div')
    reel.classList.add('reel')
    opts.cls && reel.classList.add(opts.cls)

  this.elem = reel
  this.$elem = $(reel)
  this.maxHeight = this.opts.itemHeight * this.opts.itemCount
  
  this.startDuration = 120 * this.opts.itemCount
  this.linearDuration = 100 * this.opts.itemCount
  
  this.which(1)

  this.createReelImg = function() {
    var _this = this

    if (!this.imgFragment) {
      this.imgFragment = document.createDocumentFragment()
      this.opts.imgData.forEach(function (data, index) {
        var tile = document.createElement('div')
        tile.classList.add('tile')
        tile.classList.add('tile-' + (index + 1))
        var image = document.createElement('img')
        image.src = data.img

        tile.appendChild(image)
        _this.imgFragment.appendChild(tile)
      })
    }

    return this.imgFragment.cloneNode(true)
  }

  reel.appendChild(this.createReelImg())
  reel.appendChild(this.createReelImg())
  
  return this
}
Reel.prototype = {
  which: function(num) {
    var top = this.calcPos(num)
    this.$elem.css('top', top)
  },
    
  calcPos: function(num) {
    var top = -(num - 2) * this.opts.itemHeight
    if (num === 1) {
      top = -(num + this.opts.itemCount - 2) * this.opts.itemHeight
    }
    return top
  },

  start: function() {
    var self = this,
      reel = this.$elem

    this.loop = 0
    if (this.opts.itemCount <= 4) {
      this.maxloop = 8
    } else {
      this.maxloop = 3
    }
    this.animating = true

    animate(0, this.startDuration, 'ease-in')

    function animate(top, duration, type, fun) {

      reel.animate({top: top}, duration, type, function() {
        fun && fun()
        self.loop += 1
        if (self.loop > self.maxloop && self.callback) {
          reel.css('top', -(self.maxHeight) + 'px')
          animate(self.callback.top, self.startDuration, 'ease-out', function() {
            self.callback.callback()
            self.callback = false
            animate = function() {}
          })
          return false
        }
        if (reel.css('top') === '0px') {
          reel.css('top', -(self.maxHeight) + 'px')
          animate(0, self.linearDuration, 'linear')
        }
      })
    }

  },

  stop: function(ret, callback) {
    var self = this,
      num = 1

    this.animating = false
    for (var i = 0, len = this.opts.imgData.length; i < len; i++) {
      if (ret == this.opts.imgData[i].id) {
        num = i + 1
      }
    }
    this.callback = {
      top : this.calcPos(num),
      callback: callback
    }
  }
}

var SlotMachine = (function () {
  function SlotMachine(opts) {

    this.opts = opts || {}
    this.elem = opts.elem

    this.reelCount = opts.reelCount || 3
    this.delayTime = opts.delayTime || 500

    this.animating = false

    this.itemCount = this.opts.imgData.length
    this.itemHeight = this.opts.item.height

    this.reels = []
    this.animateStack = []
    this.events = {}

    this.createContainer()
    this.render()
  }

  SlotMachine.prototype.createContainer = function createContainer() {
    var outer = document.createElement('div')
    outer.classList.add('slot-machine-outer')

    var inner = document.createElement('div')
    inner.classList.add('slot-machine-inner')
    if (this.itemCount <= 2) {
      inner.style.top = 0
    }
    this.container = outer
    this.inner = inner

    outer.appendChild(inner)
    this.inner.appendChild(this.createReels())
  }

  SlotMachine.prototype.createReels = function createReels() {
    var fragment = document.createDocumentFragment()

    for (var i = 1; i <= this.reelCount; i++) {
      var reel = new Reel({
        cls: 'reel-' + i,
        itemHeight: this.itemHeight,
        itemCount: this.itemCount,
        imgData: this.opts.imgData
      })

      fragment.appendChild(reel.elem)
      this.reels.push(reel)
    }
    window.reels = this.reels
    return fragment
  }

  /**
   * 开始动画
   */

  SlotMachine.prototype.start = function start() {
    if (this.animating) return false

    this.turnReel(0)
    this.animating = true
    this.trigger('start')
  }

  /**
   * 转动卷带
   */
  SlotMachine.prototype.turnReel = function turnReel(num) {
    var self = this,
      reel = this.reels[num]

    reel && setTimeout(function () {
      reel.start()
      self.turnReel(num + 1)
    }, this.delayTime)
  }

  SlotMachine.prototype.stop = function stop() {
    if (!this.animating) return false

    this.trigger('stop')
    this.animating = false
  }

  SlotMachine.prototype.render = function render() {
    this.elem.appendChild(this.container)
  }

  // this.setResult([1, 3, 5])
  SlotMachine.prototype.setResult = function(rets) {

    var self = this

    self.reels[0].stop(rets[0], function() {
      self.reels[1].stop(rets[1], function() {
        self.reels[2].stop(rets[2], function() {
          setTimeout(function() {
            self.stop()
          }, 500)
        })
      })
    })
  }

  SlotMachine.prototype.reset = function reset() {
    var _this4 = this

    if (this.animating) return false

    this.reels.forEach(function (reel) {
      reel.style.top = -(_this4.itemCount * _this4.itemHeight) + 'px'
    })
    this.animateStack = []
  }

  SlotMachine.prototype.random = function random() {
    var count = this.itemCount - 1,
        rets = []

    if (count >= 3) {
      for (var i = 0; i < this.reelCount; i++) {
        rets.push(unique())
      }      
    } else {
      rets = [0, 1, 0]
    }

    for (var j = 0, len = rets.length; j < len; j++) {
      var index = rets[j]
      rets[j] = this.opts.imgData[index].id
    }

    function unique() {
      var num = Random(0, count)
      if (rets.indexOf(num) > -1) {
        num = unique()
      }
      return num
    }

    this.setResult(rets)
  }

  SlotMachine.prototype.trigger = function trigger(name) {
    var callbacks = this.events[name]
    for (var i = 0, len = callbacks.length; i < len; i++) {
      callbacks[i].apply(null, [].slice.call(arguments, 1))
    }
  }

  SlotMachine.prototype.on = function on(name, callback) {
    (this.events[name] = this.events[name] || []).push(callback)
  }

  return SlotMachine
})()

/**
 * 老虎机模型
 */
function OrderModel(opts) {
  this.opts = opts || {}

  this.events = {}
  this.params = {}

  this.maxRequestTime = 3
  this.requestCounter = 0
  this.delayTime = 1000

  if (this.delayTime) {
    this.request = this._delayRequest
  } else {
    this.request = this._request
  }
  
  this.resultMap = {
    "-1": "retry",
    "0" : "noWinning",
    "1" : "again",
    "2" : "winning"
  }

}

OrderModel.prototype = {
  _request: function() {
    $.ajax({
      url       : this.opts.url,
      type      : 'POST',
      dataType  : 'json',
      data      : this.params,
      timeout   : 8000,
      beforeSend  : $.proxy(this.handleBeforeSend, this),
      success     : $.proxy(this.handleSuccess, this),
      error       : $.proxy(this.handleError, this)
    })
  },

  setParam: function(key, val) {
    if (key && val) {
      this.params[key] = val
    }
  },
  
  _delayRequest: function() {
    var self = this,
      request = this._request

    setTimeout(function() { request.call(self) }, this.delayTime)
  },

  handleBeforeSend: function() {
    this.requestCounter++
  },

  // 处理请求成功
  handleSuccess: function(data, status, xhr) {
    var method = this.resultMap[data.result]

    if (method in this) {
      this.result = data
      this[method].call(this)
    }

    this.trigger('success')
  },
  
  handleError: function() {
    this.trigger('retry')
  },

  isExceedMaxRequest: function() {
    if (this.requestCounter > this.maxRequestTime) {
      return true
    }
  },

  // 未中奖
  noWinning: function() {
    this.trigger('noWinning', this.result)
  },

  // 中奖了
  winning: function() {
    this.trigger('winning', this.result)
  },
  
  // 再来一次
  again: function() {
    this.trigger('again', this.result)
  },
  
  // 重试请求
  retry: function(time) {
    var self = this
    if (this.isExceedMaxRequest()) {
      console.log('超过最大请求次数')
      this.requestCounter = 0
      this.trigger('retry')
    } else {
      setTimeout(function() {
        self.request()
      }, 1000)

    }
  },

  on: function(name, callback) {
    (this.events[name] = this.events[name] || []).push(callback)
  },
  
  trigger: function(name) {
    var callbacks = false
    if (!(callbacks = this.events[name])) return

    for (var i = 0, len = callbacks.length; i < len; i++) {
      callbacks[i].apply(null, [].slice.call(arguments, 1))
    }
  }

}